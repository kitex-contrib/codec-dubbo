// Code generated by thriftgo (0.3.10). DO NOT EDIT.

package hello

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"strings"
)

type KitexEnum int64

const (
	KitexEnum_ONE   KitexEnum = 0
	KitexEnum_TWO   KitexEnum = 1
	KitexEnum_THREE KitexEnum = 2
	KitexEnum_FOUR  KitexEnum = 3
	KitexEnum_FIVE  KitexEnum = 4
)

func (p KitexEnum) String() string {
	switch p {
	case KitexEnum_ONE:
		return "ONE"
	case KitexEnum_TWO:
		return "TWO"
	case KitexEnum_THREE:
		return "THREE"
	case KitexEnum_FOUR:
		return "FOUR"
	case KitexEnum_FIVE:
		return "FIVE"
	}
	return "<UNSET>"
}

func KitexEnumFromString(s string) (KitexEnum, error) {
	switch s {
	case "ONE":
		return KitexEnum_ONE, nil
	case "TWO":
		return KitexEnum_TWO, nil
	case "THREE":
		return KitexEnum_THREE, nil
	case "FOUR":
		return KitexEnum_FOUR, nil
	case "FIVE":
		return KitexEnum_FIVE, nil
	}
	return KitexEnum(0), fmt.Errorf("not a valid KitexEnum string")
}

func KitexEnumPtr(v KitexEnum) *KitexEnum { return &v }
func (p *KitexEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = KitexEnum(result.Int64)
	return
}

func (p *KitexEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GreetRequest struct {
	Req string `thrift:"req,1,required" frugal:"1,required,string" json:"req"`
}

func NewGreetRequest() *GreetRequest {
	return &GreetRequest{}
}

func (p *GreetRequest) InitDefault() {
	*p = GreetRequest{}
}

func (p *GreetRequest) GetReq() (v string) {
	return p.Req
}
func (p *GreetRequest) SetReq(val string) {
	p.Req = val
}

func (p *GreetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GreetRequest(%+v)", *p)
}

func (p *GreetRequest) DeepEqual(ano *GreetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *GreetRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Req, src) != 0 {
		return false
	}
	return true
}

type GreetResponse struct {
	Resp string `thrift:"resp,1,required" frugal:"1,required,string" json:"resp"`
}

func NewGreetResponse() *GreetResponse {
	return &GreetResponse{}
}

func (p *GreetResponse) InitDefault() {
	*p = GreetResponse{}
}

func (p *GreetResponse) GetResp() (v string) {
	return p.Resp
}
func (p *GreetResponse) SetResp(val string) {
	p.Resp = val
}

func (p *GreetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GreetResponse(%+v)", *p)
}

func (p *GreetResponse) DeepEqual(ano *GreetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Resp) {
		return false
	}
	return true
}

func (p *GreetResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Resp, src) != 0 {
		return false
	}
	return true
}

type GreetService interface {
	Greet(ctx context.Context, req string) (r string, err error)

	GreetWithStruct(ctx context.Context, req *GreetRequest) (r *GreetResponse, err error)
}

type GreetEnumService interface {
	GreetEnum(ctx context.Context, req KitexEnum) (r KitexEnum, err error)
}
