// Code generated by Kitex v0.9.1. DO NOT EDIT.

package greetservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	hello "github.com/kitex-contrib/codec-dubbo/samples/helloworld/kitex/kitex_gen/hello"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Greet": kitex.NewMethodInfo(
		greetHandler,
		newGreetServiceGreetArgs,
		newGreetServiceGreetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GreetWithStruct": kitex.NewMethodInfo(
		greetWithStructHandler,
		newGreetServiceGreetWithStructArgs,
		newGreetServiceGreetWithStructResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	greetServiceServiceInfo                = NewServiceInfo()
	greetServiceServiceInfoForClient       = NewServiceInfoForClient()
	greetServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return greetServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return greetServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return greetServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "GreetService"
	handlerType := (*hello.GreetService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName":     "hello",
		"ServiceFilePath": `api.thrift`,
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func greetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hello.GreetServiceGreetArgs)
	realResult := result.(*hello.GreetServiceGreetResult)
	success, err := handler.(hello.GreetService).Greet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newGreetServiceGreetArgs() interface{} {
	return hello.NewGreetServiceGreetArgs()
}

func newGreetServiceGreetResult() interface{} {
	return hello.NewGreetServiceGreetResult()
}

func greetWithStructHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*hello.GreetServiceGreetWithStructArgs)
	realResult := result.(*hello.GreetServiceGreetWithStructResult)
	success, err := handler.(hello.GreetService).GreetWithStruct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGreetServiceGreetWithStructArgs() interface{} {
	return hello.NewGreetServiceGreetWithStructArgs()
}

func newGreetServiceGreetWithStructResult() interface{} {
	return hello.NewGreetServiceGreetWithStructResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Greet(ctx context.Context, req string) (r string, err error) {
	var _args hello.GreetServiceGreetArgs
	_args.Req = req
	var _result hello.GreetServiceGreetResult
	if err = p.c.Call(ctx, "Greet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GreetWithStruct(ctx context.Context, req *hello.GreetRequest) (r *hello.GreetResponse, err error) {
	var _args hello.GreetServiceGreetWithStructArgs
	_args.Req = req
	var _result hello.GreetServiceGreetWithStructResult
	if err = p.c.Call(ctx, "GreetWithStruct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
